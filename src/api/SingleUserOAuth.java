package api;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.naming.directory.InvalidAttributesException;

import org.apache.commons.codec.EncoderException;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.net.URLCodec;

public class SingleUserOAuth extends Auth{

	private URLCodec urlEncoder;

	public SingleUserOAuth(String consumerKey, String consumerSecret, String accessToken, String accessTokenSecret)
	{
		super(consumerKey, consumerSecret, accessToken, accessTokenSecret);
		urlEncoder = new URLCodec();
	}

	private String oAuthSign(String input) throws InvalidAttributesException
	{
		try
		{
			SecretKeySpec signingKey = getSecret();
			Mac mac = Mac.getInstance("HmacSHA1");
			mac.init(signingKey);

			return new URLCodec().encode(new String(Base64.encodeBase64(mac.doFinal(input.getBytes()))));
		}
		catch(NoSuchAlgorithmException e)
		{
			e.printStackTrace();
		}

		catch(InvalidKeyException e)
		{
			System.err.println("The consumer secret key and/or access token secret are not correct.");
			throw new InvalidAttributesException("Only official keys/tokens generated by Twitter are accepted");
		}

		catch(EncoderException e)
		{
			e.printStackTrace();
		}
		return null;
	}

	public String baseURL(String url)
	{
		return url.split("\\?")[0];
	}

	private String generateNonce()
	{
		char characters[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R',
				'S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n',
				'o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9'};


		Random gen = new Random();
		StringBuilder nonce = new StringBuilder();

		for(int i = 0; i < 32; i++){
			nonce.append(characters[gen.nextInt(characters.length)]);
		}

		return nonce.toString();
	}
	
	public String percentEncode(String text)
	{
		try {
			return urlEncoder.encode(text, "UTF-8").replace("+", "%20").replace("*", "%2A").replace("%7E", "~");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return null;
	}
	public String generateAuthenticationHeader(String encodedBaseURL, Map<String, String> parameters) throws InvalidAttributesException
	{
		Map<String,String> authParams = new TreeMap<String, String>();
		
		for(String paramKey : parameters.keySet())
			authParams.put(paramKey,parameters.get(paramKey));
		
		authParams.put("oauth_consumer_key", getConsumerKey());
		authParams.put("oauth_token", getAccessToken());
		authParams.put("oauth_timestamp", ""+(System.currentTimeMillis()/1000));
		authParams.put("oauth_nonce", generateNonce());
		authParams.put("oauth_version", "1.0");
		authParams.put("oauth_signature_method", "HMAC-SHA1");
		
		String paramsURL = "";
		
		for(String key : authParams.keySet())
			paramsURL += percentEncode(key) + "=" + percentEncode(authParams.get(key))+"&";
		paramsURL = paramsURL.substring(0, paramsURL.length() - 1);
		
		String encodedURL = encodedBaseURL + percentEncode(paramsURL);
		
		return "OAuth oauth_consumer_key=\""+ getConsumerKey() +"\", oauth_nonce=\""
				+authParams.get("oauth_nonce")+"\", oauth_signature=\""+oAuthSign(encodedURL)
				+"\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\""
				+authParams.get("oauth_timestamp")+"\", oauth_token=\""
				+getAccessToken()+"\", oauth_version=\"1.0\"";

	}

}